import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import random
import os
import torch


def show_tensor_heatmap(img, annot=None, fmt=".1f", save_path=None):
    plt.figure(figsize=(10, 20))  # 画布大小
    sns.set()
    ax = sns.heatmap(img, cmap="rainbow", annot=annot, fmt=fmt)  # cmap是热力图颜色的参数

    # plt.rcParams["font.sans-serif"] = ['SimHei']
    plt.rcParams["axes.unicode_minus"] = False
    if save_path is not None:
        plt.savefig(save_path)
        plt.close()
    else:
        plt.show()


class Accumulator:  #@save
    """在`n`个变量上累加。"""
    def __init__(self, n):
        self.data = [0.0] * n

    def add(self, *args):
        self.data = [a + float(b) for a, b in zip(self.data, args)]

    def divided(self, arg):
        self.data = [a / float(arg) for a in self.data]

    def reset(self):
        self.data = [0.0] * len(self.data)

    def __getitem__(self, idx):
        return self.data[idx]


def setup_seed(seed):
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    os.environ['CUBLAS_WORKSPACE_CONFIG'] = ':4096:8'
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)  # if you are using multi-GPU.
    torch.backends.cudnn.benchmark = False
    torch.backends.cudnn.deterministic = True
    # torch.set_deterministic(True)
